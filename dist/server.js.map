{"version":3,"sources":["../src/config/config.ts","../src/app.ts","../src/routes/profileRoutes.ts","../src/models/profile.ts","../src/config/db.ts","../src/controllers/profileController.ts","../src/middlewares/errorHandler.ts","../src/server.ts"],"sourcesContent":["import dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\ninterface Config {\r\n  port: number;\r\n  nodeEnv: string;\r\n  atlasUri: string;\r\n}\r\n\r\nconst config: Config = {\r\n  port: Number(process.env.PORT) || 3000,\r\n  nodeEnv: process.env.NODE_ENV || 'development',\r\n  atlasUri: process.env.ATLAS_URI || '',\r\n};\r\n\r\nexport default config;\r\n","import express from 'express';\r\nimport profileRoutes from './routes/profileRoutes.ts';\r\nimport { errorHandler } from './middlewares/errorHandler.ts';\r\n\r\nconst app = express();\r\n\r\napp.use(express.json());\r\n\r\n// Routes\r\napp.use('/profiles', profileRoutes);\r\n\r\n// Global error handler (should be after routes)\r\napp.use(errorHandler);\r\n\r\nexport default app;\r\n","import { Router } from 'express';\r\nimport {\r\n  createProfile,\r\n  getProfiles,\r\n  getProfileById,\r\n  updateProfile,\r\n  deleteProfile,\r\n} from '../controllers/profileController.ts';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/', getProfiles);\r\nrouter.get('/:id', getProfileById);\r\nrouter.post('/', createProfile);\r\nrouter.put('/:id', updateProfile);\r\nrouter.delete('/:id', deleteProfile);\r\n\r\nexport default router;\r\n","export interface Profile {\r\n  id: number;\r\n  userId: number;\r\n  name: string;\r\n  picture: string;\r\n  uri: string;\r\n}\r\n\r\nexport let profiles: Profile[] = [];\r\n","import { MongoClient, Db } from 'mongodb';\r\nimport config from './config.ts';\r\n\r\nconst connectionString = config.atlasUri;\r\nconst client = new MongoClient(connectionString);\r\n\r\nlet db: Db | null = null;\r\n\r\nexport async function getDb(): Promise<Db> {\r\n  if (!db) {\r\n    await client.connect();\r\n    db = client.db('nexus');\r\n  }\r\n  return db;\r\n}\r\n","import type { Request, Response, NextFunction } from 'express';\r\nimport { profiles } from '../models/profile.ts';\r\nimport type { Profile } from '../models/profile.ts';\r\nimport { getDb } from '../config/db.ts';\r\n\r\n// Create an profile\r\nexport const createProfile = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) => {\r\n  try {\r\n    const { name, uri, picture, userId } = req.body;\r\n    const newProfile: Profile = { id: Date.now(), name, uri, picture, userId };\r\n\r\n    const db = await getDb();\r\n    const collection = await db?.collection('profiles');\r\n    await collection?.insertOne(newProfile);\r\n\r\n    res.send(newProfile).status(201);\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n\r\n// Read all profiles\r\nexport const getProfiles = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) => {\r\n  try {\r\n    const db = await getDb();\r\n    const collection = await db?.collection('profiles');\r\n    const profiles = await collection?.find().toArray();\r\n\r\n    res.json(profiles).status(200);\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n\r\n// Read single profile\r\nexport const getProfileById = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) => {\r\n  try {\r\n    const id = parseInt(req.params.id, 10);\r\n    const db = await getDb();\r\n    const collection = await db?.collection('profiles');\r\n    const profile = await collection?.findOne({ id });\r\n\r\n    if (!profile) {\r\n      res.status(404).json({ message: 'Profile not found' });\r\n      return;\r\n    }\r\n\r\n    res.json(profile).status(200);\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n\r\n// Update an profile\r\nexport const updateProfile = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) => {\r\n  try {\r\n    const id = parseInt(req.params.id, 10);\r\n    const { name } = req.body;\r\n    const profileIndex = profiles.findIndex((i) => i.id === id);\r\n    if (profileIndex === -1) {\r\n      res.status(404).json({ message: 'Profile not found' });\r\n      return;\r\n    }\r\n    profiles[profileIndex].name = name;\r\n    res.json(profiles[profileIndex]);\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n\r\n// Delete an profile\r\nexport const deleteProfile = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) => {\r\n  try {\r\n    const id = parseInt(req.params.id, 10);\r\n    const profileIndex = profiles.findIndex((i) => i.id === id);\r\n    if (profileIndex === -1) {\r\n      res.status(404).json({ message: 'Profile not found' });\r\n      return;\r\n    }\r\n    const deletedProfile = profiles.splice(profileIndex, 1)[0];\r\n    res.json(deletedProfile);\r\n  } catch (error) {\r\n    next(error);\r\n  }\r\n};\r\n","import type { Request, Response, NextFunction } from 'express';\r\n\r\nexport interface AppError extends Error {\r\n  status?: number;\r\n}\r\n\r\nexport const errorHandler = (\r\n  err: AppError,\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction,\r\n) => {\r\n  console.error(err);\r\n  res.status(err.status || 500).json({\r\n    message: err.message || 'Internal Server Error',\r\n  });\r\n};\r\n","import config from './config/config.ts'; // Your config file with port, etc.\r\nimport app from './app.ts'; // Your express app with routes defined\r\n\r\nconst PORT = config.port || 3000;\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"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","names":["db","profiles"]}